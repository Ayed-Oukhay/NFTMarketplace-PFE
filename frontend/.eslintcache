[{"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/index.js":"1","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/Index.js":"2","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/RegisterPage.js":"3","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/ProfilePage.js":"4","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/LandingPage.js":"5","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Basics.js":"6","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Tabs.js":"7","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Navbars.js":"8","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Pagination.js":"9","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Notifications.js":"10","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Typography.js":"11","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/NucleoIcons.js":"12","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Signup.js":"13","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Examples.js":"14","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Download.js":"15","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/JavaScript.js":"16","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/variables/charts.js":"17","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/IndexNavbar.js":"18","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/ExamplesNavbar.js":"19","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Footer/Footer.js":"20","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/PageHeader/PageHeader.js":"21","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/Authenticate.js":"22","/home/ayed/Main/Study/PFE/Projet/frontend/src/index.js":"23","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Footer/Footer.js":"24","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/NFTCard.jsx":"25","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/User/User.jsx":"26","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/DefCard.jsx":"27","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/interact.js":"28","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/pinata.js":"29","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/ipfs.js":"30","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/MintNFT.js":"31","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/ProfilePage.js":"32","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/LandingPage.js":"33","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/BlockchainSelection.js":"34","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/Authenticate.js":"35","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/AuthenticationForm.js":"36","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Navbars/MainNavbar.js":"37","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/CreateSmartContract.js":"38","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/features.js":"39"},{"size":1656,"mtime":1607439708000,"results":"40","hashOfConfig":"41"},{"size":392,"mtime":1649149801836,"results":"42","hashOfConfig":"41"},{"size":7837,"mtime":1607439708000,"results":"43","hashOfConfig":"41"},{"size":16835,"mtime":1607439708000,"results":"44","hashOfConfig":"41"},{"size":22224,"mtime":1649155796885,"results":"45","hashOfConfig":"41"},{"size":9790,"mtime":1607439708000,"results":"46","hashOfConfig":"41"},{"size":8415,"mtime":1607439708000,"results":"47","hashOfConfig":"41"},{"size":17509,"mtime":1607439708000,"results":"48","hashOfConfig":"41"},{"size":7228,"mtime":1607439708000,"results":"49","hashOfConfig":"41"},{"size":2517,"mtime":1607439708000,"results":"50","hashOfConfig":"41"},{"size":7740,"mtime":1607439708000,"results":"51","hashOfConfig":"41"},{"size":3660,"mtime":1607439708000,"results":"52","hashOfConfig":"41"},{"size":5638,"mtime":1607439708000,"results":"53","hashOfConfig":"41"},{"size":2135,"mtime":1607439708000,"results":"54","hashOfConfig":"41"},{"size":3754,"mtime":1607439708000,"results":"55","hashOfConfig":"41"},{"size":15646,"mtime":1607439708000,"results":"56","hashOfConfig":"41"},{"size":2991,"mtime":1607439708000,"results":"57","hashOfConfig":"41"},{"size":7355,"mtime":1607439708000,"results":"58","hashOfConfig":"41"},{"size":4954,"mtime":1649153942665,"results":"59","hashOfConfig":"41"},{"size":4179,"mtime":1607439708000,"results":"60","hashOfConfig":"41"},{"size":1452,"mtime":1607439708000,"results":"61","hashOfConfig":"41"},{"size":8167,"mtime":1649163968862,"results":"62","hashOfConfig":"41"},{"size":1024,"mtime":1652361285870,"results":"63","hashOfConfig":"64"},{"size":3084,"mtime":1649420295906,"results":"65","hashOfConfig":"64"},{"size":1587,"mtime":1650531939558,"results":"66","hashOfConfig":"64"},{"size":364,"mtime":1649421461987,"results":"67","hashOfConfig":"64"},{"size":247,"mtime":1649420423362,"results":"68","hashOfConfig":"64"},{"size":2705,"mtime":1649851460482,"results":"69","hashOfConfig":"64"},{"size":979,"mtime":1650355195687,"results":"70","hashOfConfig":"64"},{"size":189,"mtime":1650280225476,"results":"71","hashOfConfig":"64"},{"size":22240,"mtime":1652952621733,"results":"72","hashOfConfig":"64"},{"size":16195,"mtime":1650533934219,"results":"73","hashOfConfig":"64"},{"size":22380,"mtime":1652439919026,"results":"74","hashOfConfig":"64"},{"size":13602,"mtime":1653388790831,"results":"75","hashOfConfig":"64"},{"size":8806,"mtime":1652187396491,"results":"76","hashOfConfig":"64"},{"size":6414,"mtime":1649246116892,"results":"77","hashOfConfig":"64"},{"size":8024,"mtime":1653403020826,"results":"78","hashOfConfig":"64"},{"size":11153,"mtime":1653399541265,"results":"79","hashOfConfig":"64"},{"size":1048,"mtime":1652437348687,"results":"80","hashOfConfig":"64"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1qjm9t1",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"1x3ls9v",{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"146","usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/index.js",[],["164","165"],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/Index.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/RegisterPage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/ProfilePage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/LandingPage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Basics.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Tabs.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Navbars.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Pagination.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Notifications.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Typography.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/NucleoIcons.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Signup.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Examples.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Download.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/JavaScript.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/variables/charts.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/IndexNavbar.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/ExamplesNavbar.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Footer/Footer.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/PageHeader/PageHeader.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/Authenticate.js",["166","167"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/index.js",[],["168","169"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Footer/Footer.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/NFTCard.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/User/User.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/DefCard.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/interact.js",["170","171","172","173"],"// ************** This file is used to interact with our smart contract **************\n// ***********************************************************************************\n\nimport { pinJSONToIPFS } from './pinata.js'; // used later to add metadata when creating an NFT\n\n// --------- Connecting to Alchemy and importing our smart contract ---------\nrequire('dotenv').config();\nconst alchemykey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemykey);\n\nconst contractABI = require('./contract-abi.json')\nconst contractAddress = \"0x1e8465f02BD7A428d33b4940Cd1053167A1f3110\";\n// ----------------------------------------------------------------------------\n\n// ------------ Calling the Mint function in our smart contract --------------\nexport const mintNFT = async (url, name, description) => {\n    // error handling\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\n        return {\n            success: false,\n            status: \"❗Please make sure all fields are completed before minting.\",\n        }\n    }\n\n    // make metadata\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = url;\n    metadata.description = description;\n\n    // make pinata call\n    const pinataResponse = await pinJSONToIPFS(metadata);\n    if (!pinataResponse.success) {\n        return {\n            success: false,\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\n        }\n    }\n    const tokenURI = pinataResponse.pinataUrl;\n\n    // Initiating our contract with web3\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    //set up your Ethereum transaction\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        'data': window.contract.methods.mintTo(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract \n    };\n\n    //sign the transaction via Metamask\n    try {\n        const txHash = await window.ethereum\n            .request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        return {\n            success: true,\n            status: \"✅ Check out your transaction on Etherscan: https://kovan.etherscan.io/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"😥 Something went wrong: \" + error.message\n        }\n\n    }\n}\n// ---------------------------------------------------------------------------","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/pinata.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/ipfs.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/MintNFT.js",["174","175","176","177","178"],"import React, { useState, useEffect } from \"react\";\nimport \"./MintNFT.css\";\nimport { Input } from \"reactstrap\";\nimport Select from 'react-select';\nimport ipfs from '../../utils/ipfs';\n\n// Components for the unlockable content section\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// core components\nimport Navbar from \"components/Navbars/MainNavbar.js\";\nimport Footer from \"components/Footer/Footer.js\";\n\nimport { pinJSONToIPFS } from '../../utils/pinata.js'; // used later to add metadata when creating an NFT\n\nimport BlockchainSelectionModal from \"./BlockchainSelection\";\n\n// ********** Connecting to Alchemy and importing our smart contract **********\nrequire('dotenv').config();\nconst alchemykey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemykey);\n//Requesting current connected wallet address::...........\n//Changing the contractABI and the contractAddress depending on the current blockchain the user is connected to\n// Specifying the contract info\nconst contractABI = require('../../utils/contract-abi.json');\nconst contractAddress = \"0x7a1C29e5462989dB8680AaF5b9c1FeD6BDC16303\"; //A contract deployed on the polygon Mumbai testnet\n// *****************************************************************************\n\n// ************ Checking connection to the wallet ************\nexport const getCurrentWalletConnected = async () => {\n    // if (BlockchainSelectionModal.PolygonSelected) {\n    // console.log(\"Polygon selected\");\n    if (window.ethereum) { // Checking if metamask is even installed on the browser\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"👆🏽 Write a message in the text-field above.\",\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"🦊 Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else { // If the metamask browser extention is not installed\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        🦊{\" \"}\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                            You must install Metamask, a virtual Ethereum wallet, in your browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n    //     } else if (BlockchainSelectionModal.SolanaSelected) {\n    //         console.log(\"Solana selected\");\n    //         if (window.solana && window.solana.isPhantom) { // Checking if phantom is even installed on the browser\n    //             try {\n    //                 const addressArray = await window.solana.connect();\n    //                 if (addressArray !== null) {\n    //                     return {\n    //                         address: addressArray.publicKey.toString(),\n    //                         status: \"👆🏽 Write a message in the text-field above.\",\n    //                     };\n    //                 } else {\n    //                     return {\n    //                         address: \"\",\n    //                         status: \"👻 Connect to Phantom using the top right button.\",\n    //                     };\n    //                 }\n    //             } catch (err) {\n    //                 return {\n    //                     address: \"\",\n    //                     status: \"😥 \" + err.message,\n    //                 };\n    //             }\n    //         } else { // If the phantom browser extention is not installed\n    //             return {\n    //                 address: \"\",\n    //                 status: (\n    //                     <span>\n    //                         <p>\n    //                             {\" \"}\n    //                             👻{\" \"}\n    //                             <a target=\"_blank\" href={`https://phantom.app/download`}>\n    //                                 You must install Phantom, a Solana-based wallet, in your browser.\n    //                             </a>\n    //                         </p>\n    //                     </span>\n    //                 ),\n    //             };\n    //         }\n    //     }        \n\n    };\n    // *****************************************************************************\n\n    // *************** Calling the Mint function in our smart contract ***************\n    export const mintNFT = async (img, name, description, extLink, attributes) => {\n        // Cheking if all the required fields are filled\n        if (img === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\n            return {\n                success: false,\n                status: \"❗Please make sure all fields are completed before minting.\",\n            }\n        }\n\n        // Creating the metadata\n        const metadata = new Object();\n        metadata.name = name;\n        metadata.image = img;\n        metadata.description = description;\n        metadata.externalLink = extLink;\n        metadata.attributes = attributes;\n\n        // Calling pinata to pin the metadata to IPFS\n        const pinataResponse = await pinJSONToIPFS(metadata);\n        if (!pinataResponse.success) {\n            return {\n                success: false,\n                status: \"😢 Something went wrong while uploading your tokenURI.\",\n            }\n        }\n        const tokenURI = pinataResponse.pinataUrl;\n\n        // Initiating our contract with web3\n        window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n        //setting up the Ethereum transaction\n        const transactionParameters = {\n            to: contractAddress, // Required except during contract publications.\n            from: window.ethereum.selectedAddress, // must match user's active address.\n            'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to the NFT smart contract \n        };\n\n        //signing the transaction via Metamask\n        try {\n            const txHash = await window.ethereum\n                .request({\n                    method: 'eth_sendTransaction',\n                    params: [transactionParameters],\n                });\n            return {\n                success: true,\n                status: \"✅ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com/tx/\" + txHash\n            }\n        } catch (error) {\n            return {\n                success: false,\n                status: \"😥 Something went wrong: \" + error.message\n            }\n        }\n    }\n    // *****************************************************************************\n\n    // **************** Begining the Main function ****************\n    export default function MintNFT() {\n        //variable to handle the unlockable content section\n        const [unlockable, setUnlockable] = useState(false);\n\n        //State variables\n        const [status, setStatus] = useState(\"\");\n        const [walletAddress, setWallet] = useState(\"\");\n        const [name, setName] = useState(\"\"); //metadata component\n        const [description, setDescription] = useState(\"\"); //metadata component\n        const [img, setImg] = useState(\"\"); //metadata component\n        const [extlink, setExtlink] = useState(\"\"); //metadata component\n        const [attributes, setAttributes] = useState([\n            { name: \"\", value: \"\" },\n        ]); //metadata component\n\n        // ------ Begining the image upload handling ------\n        const [images, setImages] = useState([]);\n        const [imageURLs, setImageURLs] = useState([]);\n\n        useEffect(() => {\n            if (images.length < 1) return;\n            const newImageUrls = [];\n            images.forEach(image => newImageUrls.push(URL.createObjectURL(image)));\n            setImageURLs(newImageUrls);\n        }, [images]);\n\n        // Capturing the uploaded image\n        const onImageChange = (event) => {\n            setImages([...event.target.files]);\n            const file = event.target.files[0];\n            const reader = new window.FileReader();\n            reader.readAsArrayBuffer(file);\n            reader.onloadend = () => {\n                // uploading the image to ipfs and getting the hash\n                const imgBuffer = Buffer.from(reader.result);\n                ipfs.files.add(imgBuffer, (error, result) => {\n                    if (error) {\n                        console.log(error);\n                    } else {\n                        setImg(\"https://ipfs.io/ipfs/\" + result[0].hash);\n                        console.log(result[0].hash);\n                    }\n                })\n            };\n        }\n        // ------ End of the image upload handling ------\n\n        // ------ Begining the NFT properties handling ------\n        let addFormFields = () => {\n            setAttributes([...attributes, { name: \"\", value: \"\" }])\n        }\n\n        let removeFormFields = (i) => {\n            let newAttributeValues = [...attributes];\n            newAttributeValues.splice(i, 1);\n            setAttributes(newAttributeValues)\n        }\n        // ------ Ending the NFT properties handling ------\n\n        const handleSubmit = (event) => { //for the form submit\n            alert(JSON.stringify(attributes));\n            console.log(\"sucess\");\n        }\n\n        const handleChange = (i, event) => { // Used for the unlockable content section\n            // Detecting added NFT traits\n            let newAttributeValues = [...attributes];\n            newAttributeValues[i][event.target.name] = event.target.value;\n            setAttributes(newAttributeValues);\n            //console.log(i, event.target.name)\n        };\n\n        const handleChangeUnlockableContent = (event) => { // Used for the unlockable content section\n            setUnlockable(event.target.checked);\n        };\n\n        const onMintPressed = async () => { // Function to mint the token once the form is submitted\n            //console.log(\"inputFields\", attributes);\n            const address = await getCurrentWalletConnected();\n            if (address.address !== \"\") {\n                const { status } = await mintNFT(img, name, description, extlink, attributes);\n                setStatus(status);\n            }\n            else {\n                setStatus(\"🦊 Connect to Metamask, 👻 Phantom, or any other wallet using the top right buttons.\");\n                window.alert(\"You're not currently connected to your wallet.\");\n            }\n        };\n\n        const ChangeCurrentBlockchain = () => {\n            // if (event.target.value === \"rinkeby\") {\n            //     setContractAddress(\"0x8d12a197cb00d4747a1fe03395095ce2a5cc6819\");\n            // }\n            // else if (event.target.value === \"mainnet\") {\n            //     setContractAddress(\"0x8d12a197cb00d4747a1fe03395095ce2a5cc6819\");\n            // }\n            return (\n                <>\n                    <BlockchainSelectionModal />\n                </>\n            )\n        }\n\n        return (\n            <>\n                {/* --------------- Begin Navbar --------------- */}\n                <Navbar />\n                {/* --------------- End Navbar --------------- */}\n\n                <div className=\"wrapper\">\n                    {/* -------------- Begin NFT Creation Form ----------------- */}\n                    <div className=\"content-center\">\n                        <section className=\"section section-lg\">\n                            <section className=\"section\">\n                                <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">* Required fields</small>\n                                <br />\n                                <form onSubmit={handleSubmit}>\n                                    <div className=\"form-group\">\n                                        <label for=\"uploadMedia\">Choose an Image, Video, Audio, or a 3D Model *</label>\n                                        <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLTF. Max size: 100 MB</small>\n                                        <input type=\"file\" class=\"form-control\" id=\"uploadMedia\" aria-describedby=\"uploadMediaHelp\" onChange={onImageChange} required />\n                                        {imageURLs.map(imageSrc => <img alt=\"...\" src={imageSrc} style={{ width: 200, height: 200 }} />)}\n                                    </div>\n                                    <div class=\"form-group\" >\n                                        <label for=\"exampleInputName\">Name *</label>\n                                        <input type=\"text\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"Enter NFT name\" onChange={(event) => setName(event.target.value)} required />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleInputLink\">External Link (optional)</label>\n                                        <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">This will allow you to include a link to this URL on this item's detail page, so that users can click to learn more about it. You are welcome to link to your own webpage with more details.</small>\n                                        <input type=\"text\" class=\"form-control\" id=\"exampleInputLink\" placeholder=\"https://yoursite.com/item1/\" onChange={(event) => setExtlink(event.target.value)} />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleInputDesc\">Description *</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">The description will be included on the item's detail page underneath its image.</small>\n                                        <input type=\"text\" class=\"form-control\" id=\"exampleInputDesc\" placeholder=\"Provide a detailed description of your item.\" onChange={(event) => setDescription(event.target.value)} />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Collection (optional)</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">This is the collection where your item will appear.</small>\n                                        <select class=\"form-control\" id=\"exampleColl\">\n                                            <option style={{ backgroundImage: \"../../assets/img/image.png\", width: 20, height: 20 }}>PhotographyCollection#123</option>\n                                            <option>TestCollection...</option>\n                                            <option>#3</option>\n                                            <option>...</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Properties (optional)</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">Add your NFT Traits.</small>\n                                        <br />\n                                        {/* ---------- Begin NFT Traits section ---------- */}\n                                        {attributes.map((element, index) => (\n                                            <div className=\"form-inline\" key={index}>\n                                                <label style={{ color: \"white\", paddingRight: 20 }}>Type</label>\n                                                <input type=\"text\" name=\"name\" placeholder='Exp: Class' class=\"form-control\" value={element.name || \"\"} onChange={e => handleChange(index, e)} /> &nbsp;&nbsp;&nbsp;&nbsp;\n                                                <label style={{ color: \"white\", paddingRight: 20 }}>Value</label>\n                                                <input type=\"text\" name=\"value\" placeholder='Exp: Warrior' class=\"form-control\" value={element.value || \"\"} onChange={e => handleChange(index, e)} /> &nbsp;&nbsp;&nbsp;&nbsp;\n                                                {\n                                                    index ?\n                                                        <button type=\"button\" class=\"btn btn-danger\" onClick={() => removeFormFields(index)}>Remove</button>\n                                                        : null\n                                                }\n                                            </div>\n                                        ))}\n                                        {/* ---------- End NFT Traits section ---------- */}\n                                        <button class=\"btn btn-secondary\" type=\"button\" onClick={() => addFormFields()}>+ Add Properties</button>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Unlockable Content\n                                            <small id=\"DescHelp\" class=\"form-text text-muted\">Include unlockable content that can only be revealed by the owner of the item.</small>\n                                        </label>\n                                        <br />\n                                        <FormControlLabel\n                                            control={\n                                                <Switch checked={unlockable} onChange={handleChangeUnlockableContent} aria-label=\"login switch\" />\n                                            }\n                                            label={unlockable ? <Input class=\"form-control\" placeholder=\"Enter Content (Access key, Redeem code, link to a file,...).\" rows=\"3\" type=\"textarea\" /> : <Input class=\"form-control\" placeholder=\"Enter Content (Access key, Redeem code, link to a file,...).\" rows=\"3\" type=\"textarea\" hidden />}\n                                        />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Supply</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">The amout of tokens you'll own.</small>\n                                        <input type=\"number\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"1\" disabled />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Smart contract</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">You can either deploy your NFT on our TNM's smart contract, or you can choose one of your own own smart contract.</small>\n                                        {/* List of smart contracts of the user including the smart contract deployed by us, OR the user can select \"other\" option and manually enter his smart contract address*/}\n                                        <select class=\"form-control\" id=\"exampleColl\">\n                                            <option>Default Contract \"0x7a1C29e5462989dB8680AaF5b9c1FeD6BDC16303\" </option>\n                                            <option>0x03ef23f801D2bc9B2A839DD476a16842C0066456</option>\n                                            <option>...</option>\n                                            <option>Other</option>\n                                        </select>\n                                        {/* If the user selects Other then the line here under should appear and the selection list above should be hidden */}\n                                        <input type=\"text\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"0x7a1C29e5462989dB8680AaF5b9c1FeD6BDC16303\" hidden/>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlColl\">Blockchain</label>\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">If you want to change your current Blockchain, you can click this button.</small>\n                                        {/* <BlockchainSelectionModal style={{ display: \"flex\", margin: \"auto\" }} value=\"Change Blockchain\"/> */}\n                                        <button class=\"btn btn-warning\" type=\"button\" onClick={ChangeCurrentBlockchain} style={{ padding: 11 }}><i className=\"tim-icons icon-alert-circle-exc\" style={{ marginRight: 7 }} />Change Blockchain</button>\n                                    </div>\n                                    <br />\n                                    <button type=\"button\" class=\"btn btn-primary\" onClick={onMintPressed}><i className=\"tim-icons icon-check-2\" /> &nbsp;&nbsp; Create NFT</button>\n                                    <p id=\"status\">{status}</p>\n                                </form>\n                            </section>\n                        </section>\n\n                    </div>\n                    {/* -------------------------- End NFT Creation Form ------------------------- */}\n                </div>\n\n                {/* --------------- Begin Footer --------------- */}\n                <Footer />\n                {/* --------------- End Footer --------------- */}\n\n            </>\n        );\n    }\n// **************** Ending the Main function ****************","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/ProfilePage.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/LandingPage.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/BlockchainSelection.js",["179","180"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/Authenticate.js",["181","182","183"],"import { React, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport AuthForm from \"./AuthenticationForm\";\nimport {\n  Button, Card, CardHeader, DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown\n} from \"reactstrap\";\n\nimport Web3 from 'web3';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst Modals = (props) => {\n\n  // ------ Wallet connection vars ------\n  const [isConnecting, setIsConnecting] = useState(false); //used to check if the user is connecting or not to display different messages\n  const [isConnected, setIsConnected] = useState(false); // we'll use this to check if the user is connected or not\n  const [currentAccount, setCurrentAccount] = useState(null); // We'll use this to get the Metamask connected account\n  const [currentBalance, setCurrentBalance] = useState(0); // We'll use this to get the account balance of the connected user\n  // ------------------------------------\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  // ---------------- For compatibility reasons, we need to check the version of the provider (Metamask) because some browsers still use window.web3 instead of window.ethereum --------------------------\n  const detectProvider = () => {\n    let provider;\n    // ----- Checking Polygon (Ethereum) provider -----\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.solana && window.solana.isPhantom) { // ----- Checking Solana provider-----\n      provider = window.solana;\n    } else if (window.tronWeb) {\n      provider = window.tronWeb;\n    } else if (window.web3) { // ----- Checking Web3 general provider-----\n      provider = window.web3.currentProvider;\n    } else { // ----- If no provider is found -----\n      window.alert(\"No wallet browser-extension detected! check out your browser extensions!\");\n    }\n    return provider;\n  }\n  // ---------------------------------------------------------------------------------------------------------------\n\n  // ********************************* Metamask Connection (Once clicked, this function will change the status of the user to Connected!) *********************************\n  const AuthBtnClick = async () => {\n    const provider = detectProvider();\n    // Initalizing web3\n    const web3 = new Web3(provider);\n    if (provider) {\n\n      // ------------------- Cheking if Metamask is installed and detected ------------------- \n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallets installed ?\");\n      }\n\n      setIsConnecting(true);\n      await provider.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      // ------------------- Getting our Metamask account -------------------\n      const accounts = await web3.eth.getAccounts();\n\n      // ------------------- checking if we're actually connected to Metamask -------------------\n      if (accounts.length === 0) {\n        console.log(\"Please make sure you're connected to Metamask!\");\n      } else if (accounts[0] !== currentAccount) {\n        setCurrentAccount(accounts[0]);\n        console.log(\"Account changed to: \" + accounts[0]);\n\n        // ------------------- Getting the current balance -------------------\n        const accBalance = web3.utils.fromWei(\n          await web3.eth.getBalance(accounts[0]),\n          \"ether\"\n        );\n        setCurrentBalance(Number(accBalance).toFixed(6));\n        console.log(\"Balance changed to: \" + accBalance);\n        setIsConnected(true);\n      }\n\n      // ------------------- Creating the user and adding it to the database -------------------\n      // const userObject = {\n      //   publicAddress: accounts[0]\n      // };\n      // axios.post('http://localhost:7000/user', userObject).then((res) => {\n      //   console.log(res.data)\n      // }).catch((error) => {\n      //   console.log(error)\n      // });\n\n      setIsConnecting(false);\n      // props.onLogin(provider);\n    }\n  };\n  // ********************************* End Metamask Connection ******************************************\n\n  return (\n    <div>\n      <Button onClick={handleOpen} className=\"nav-link d-none d-lg-block\" color=\"secondary\" type=\"button\" style={{ width: 110 }}><i className=\"tim-icons icon-wallet-43\" />Connect</Button>\n      <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\" >\n        <Box sx={style}>\n          <Card className=\"bg-secondary shadow border-0\" >\n            <CardHeader className=\"bg-transparent pb-5\">\n              {/* -------------------- Wallet sign in -------------------- */}\n              <div className=\"text-center text-muted mb-4\">\n                <small style={{color:\"#304169\"}}>Sign in via Wallets</small>\n              </div>\n              <center>\n                <UncontrolledDropdown>\n                  <center>\n                    <DropdownToggle caret color=\"default\">\n                      <img alt=\"...\" src={require(\"../../assets/img/wallets.png\").default} style={{ width: 40, height: 40 }} />\n                      Select a wallet\n                    </DropdownToggle>\n                  </center>\n                  <DropdownMenu>\n                    <li>\n                      {/* -------------- Metamask Login btn -------------- */}\n                      <DropdownItem href=\"#pablo\" onClick={AuthBtnClick}>\n                        <img alt=\"...\" src={require(\"../../assets/img/metamask_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; Metamask\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/phantom_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; Phantom\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/tronlink_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; TronLink\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/Blocto_logo.png\").default} style={{ width: 33, height: 40 }} />\n                        &nbsp;&nbsp;&nbsp;&nbsp; Blocto\n                      </DropdownItem>\n                    </li>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </center>\n\n              {/* -------------------- Classic form sign in -------------------- */}\n              <AuthForm />\n\n              {/* -------------------- Social Media sign in -------------------- */}\n              <div className=\"text-muted text-center mt-2 mb-3\">\n                <small style={{color:\"#304169\"}}>Or sign in with</small>\n              </div>\n              <div className=\"btn-wrapper text-center\">\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/github.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Github</span>\n                </Button>\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/google.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Google</span>\n                </Button>\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/twitter.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Twitter</span>\n                </Button>\n              </div>\n\n            </CardHeader>\n          </Card>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Modals; ","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/AuthenticationForm.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Navbars/MainNavbar.js",["184","185"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/CreateSmartContract.js",["186","187"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/features.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":3,"column":132,"nodeType":"194","messageId":"195","endLine":3,"endColumn":141},{"ruleId":"196","severity":1,"message":"197","line":93,"column":64,"nodeType":"198","endLine":93,"endColumn":76},{"ruleId":"188","replacedBy":"199"},{"ruleId":"190","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":19,"column":20,"nodeType":"203","messageId":"204","endLine":19,"endColumn":22},{"ruleId":"201","severity":1,"message":"202","line":19,"column":42,"nodeType":"203","messageId":"204","endLine":19,"endColumn":44},{"ruleId":"201","severity":1,"message":"202","line":19,"column":70,"nodeType":"203","messageId":"204","endLine":19,"endColumn":72},{"ruleId":"205","severity":1,"message":"206","line":27,"column":22,"nodeType":"207","messageId":"208","endLine":27,"endColumn":34},{"ruleId":"192","severity":1,"message":"209","line":4,"column":8,"nodeType":"194","messageId":"195","endLine":4,"endColumn":14},{"ruleId":"210","severity":1,"message":"211","line":65,"column":25,"nodeType":"198","messageId":"212","endLine":65,"endColumn":87,"fix":"213"},{"ruleId":"205","severity":1,"message":"206","line":127,"column":26,"nodeType":"207","messageId":"208","endLine":127,"endColumn":38},{"ruleId":"192","severity":1,"message":"214","line":181,"column":16,"nodeType":"194","messageId":"195","endLine":181,"endColumn":29},{"ruleId":"192","severity":1,"message":"215","line":181,"column":31,"nodeType":"194","messageId":"195","endLine":181,"endColumn":40},{"ruleId":"192","severity":1,"message":"216","line":28,"column":12,"nodeType":"194","messageId":"195","endLine":28,"endColumn":23},{"ruleId":"192","severity":1,"message":"217","line":86,"column":27,"nodeType":"194","messageId":"195","endLine":86,"endColumn":37},{"ruleId":"192","severity":1,"message":"218","line":29,"column":10,"nodeType":"194","messageId":"195","endLine":29,"endColumn":22},{"ruleId":"192","severity":1,"message":"216","line":30,"column":10,"nodeType":"194","messageId":"195","endLine":30,"endColumn":21},{"ruleId":"192","severity":1,"message":"219","line":32,"column":10,"nodeType":"194","messageId":"195","endLine":32,"endColumn":24},{"ruleId":"192","severity":1,"message":"220","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":13},{"ruleId":"192","severity":1,"message":"221","line":76,"column":9,"nodeType":"194","messageId":"195","endLine":76,"endColumn":20},{"ruleId":"192","severity":1,"message":"222","line":1,"column":27,"nodeType":"194","messageId":"195","endLine":1,"endColumn":36},{"ruleId":"192","severity":1,"message":"223","line":1,"column":38,"nodeType":"194","messageId":"195","endLine":1,"endColumn":46},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["224"],["225"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'Select' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"226","text":"227"},"'walletAddress' is assigned a value but never used.","'setWallet' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'userObject' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'currentBalance' is assigned a value but never used.","'Modal' is defined but never used.","'MintNFTPage' is assigned a value but never used.","'useEffect' is defined but never used.","'setState' is defined but never used.","no-global-assign","no-unsafe-negation",[2677,2677]," rel=\"noreferrer\""]