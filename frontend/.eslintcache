[{"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/index.js":"1","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/Index.js":"2","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/RegisterPage.js":"3","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/ProfilePage.js":"4","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/LandingPage.js":"5","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Basics.js":"6","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Tabs.js":"7","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Navbars.js":"8","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Pagination.js":"9","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Notifications.js":"10","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Typography.js":"11","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/NucleoIcons.js":"12","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Signup.js":"13","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Examples.js":"14","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Download.js":"15","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/JavaScript.js":"16","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/variables/charts.js":"17","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/IndexNavbar.js":"18","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/ExamplesNavbar.js":"19","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Footer/Footer.js":"20","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/PageHeader/PageHeader.js":"21","/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/Authenticate.js":"22","/home/ayed/Main/Study/PFE/Projet/frontend/src/index.js":"23","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Footer/Footer.js":"24","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/NFTCard.jsx":"25","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/User/User.jsx":"26","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/DefCard.jsx":"27","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/interact.js":"28","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/pinata.js":"29","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/ipfs.js":"30","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/MintNFT.js":"31","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/ProfilePage.js":"32","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/LandingPage.js":"33","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/BlockchainSelection.js":"34","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/Authenticate.js":"35","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/AuthenticationForm.js":"36","/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Navbars/MainNavbar.js":"37","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/CreateSmartContract.js":"38","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/features.js":"39","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/NFTContainer.js":"40"},{"size":1656,"mtime":1607439708000,"results":"41","hashOfConfig":"42"},{"size":392,"mtime":1649149801836,"results":"43","hashOfConfig":"42"},{"size":7837,"mtime":1607439708000,"results":"44","hashOfConfig":"42"},{"size":16835,"mtime":1607439708000,"results":"45","hashOfConfig":"42"},{"size":22224,"mtime":1649155796885,"results":"46","hashOfConfig":"42"},{"size":9790,"mtime":1607439708000,"results":"47","hashOfConfig":"42"},{"size":8415,"mtime":1607439708000,"results":"48","hashOfConfig":"42"},{"size":17509,"mtime":1607439708000,"results":"49","hashOfConfig":"42"},{"size":7228,"mtime":1607439708000,"results":"50","hashOfConfig":"42"},{"size":2517,"mtime":1607439708000,"results":"51","hashOfConfig":"42"},{"size":7740,"mtime":1607439708000,"results":"52","hashOfConfig":"42"},{"size":3660,"mtime":1607439708000,"results":"53","hashOfConfig":"42"},{"size":5638,"mtime":1607439708000,"results":"54","hashOfConfig":"42"},{"size":2135,"mtime":1607439708000,"results":"55","hashOfConfig":"42"},{"size":3754,"mtime":1607439708000,"results":"56","hashOfConfig":"42"},{"size":15646,"mtime":1607439708000,"results":"57","hashOfConfig":"42"},{"size":2991,"mtime":1607439708000,"results":"58","hashOfConfig":"42"},{"size":7355,"mtime":1607439708000,"results":"59","hashOfConfig":"42"},{"size":4954,"mtime":1649153942665,"results":"60","hashOfConfig":"42"},{"size":4179,"mtime":1607439708000,"results":"61","hashOfConfig":"42"},{"size":1452,"mtime":1607439708000,"results":"62","hashOfConfig":"42"},{"size":8167,"mtime":1649163968862,"results":"63","hashOfConfig":"42"},{"size":1024,"mtime":1652361285870,"results":"64","hashOfConfig":"65"},{"size":3084,"mtime":1649420295906,"results":"66","hashOfConfig":"65"},{"size":1587,"mtime":1650531939558,"results":"67","hashOfConfig":"65"},{"size":364,"mtime":1649421461987,"results":"68","hashOfConfig":"65"},{"size":247,"mtime":1649420423362,"results":"69","hashOfConfig":"65"},{"size":2705,"mtime":1649851460482,"results":"70","hashOfConfig":"65"},{"size":979,"mtime":1650355195687,"results":"71","hashOfConfig":"65"},{"size":189,"mtime":1650280225476,"results":"72","hashOfConfig":"65"},{"size":23573,"mtime":1654853138734,"results":"73","hashOfConfig":"65"},{"size":19575,"mtime":1655220292417,"results":"74","hashOfConfig":"65"},{"size":22380,"mtime":1652439919026,"results":"75","hashOfConfig":"65"},{"size":13602,"mtime":1653388790831,"results":"76","hashOfConfig":"65"},{"size":8806,"mtime":1652187396491,"results":"77","hashOfConfig":"65"},{"size":6414,"mtime":1649246116892,"results":"78","hashOfConfig":"65"},{"size":9970,"mtime":1654771693597,"results":"79","hashOfConfig":"65"},{"size":11345,"mtime":1654178308220,"results":"80","hashOfConfig":"65"},{"size":1048,"mtime":1652437348687,"results":"81","hashOfConfig":"65"},{"size":246,"mtime":1655203552921,"results":"82","hashOfConfig":"65"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1qjm9t1",{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1x3ls9v",{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"148","usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"130"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"130"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"163","usedDeprecatedRules":"130"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"130"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/index.js",[],["171","172"],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/Index.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/RegisterPage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/ProfilePage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/LandingPage.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Basics.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Tabs.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Navbars.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Pagination.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Notifications.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Typography.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/NucleoIcons.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Signup.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Examples.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/Download.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/IndexSections/JavaScript.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/variables/charts.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/IndexNavbar.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Navbars/ExamplesNavbar.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/Footer/Footer.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/components/PageHeader/PageHeader.js",[],"/home/ayed/Downloads/Templates/blk-design-system-react-master/src/views/examples/Authenticate.js",["173","174"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/index.js",[],["175","176"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Footer/Footer.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/NFTCard.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/User/User.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/NFTCard/DefCard.jsx",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/interact.js",["177","178","179","180"],"// ************** This file is used to interact with our smart contract **************\n// ***********************************************************************************\n\nimport { pinJSONToIPFS } from './pinata.js'; // used later to add metadata when creating an NFT\n\n// --------- Connecting to Alchemy and importing our smart contract ---------\nrequire('dotenv').config();\nconst alchemykey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemykey);\n\nconst contractABI = require('./contract-abi.json')\nconst contractAddress = \"0x1e8465f02BD7A428d33b4940Cd1053167A1f3110\";\n// ----------------------------------------------------------------------------\n\n// ------------ Calling the Mint function in our smart contract --------------\nexport const mintNFT = async (url, name, description) => {\n    // error handling\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\n        return {\n            success: false,\n            status: \"❗Please make sure all fields are completed before minting.\",\n        }\n    }\n\n    // make metadata\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = url;\n    metadata.description = description;\n\n    // make pinata call\n    const pinataResponse = await pinJSONToIPFS(metadata);\n    if (!pinataResponse.success) {\n        return {\n            success: false,\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\n        }\n    }\n    const tokenURI = pinataResponse.pinataUrl;\n\n    // Initiating our contract with web3\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    //set up your Ethereum transaction\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        'data': window.contract.methods.mintTo(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract \n    };\n\n    //sign the transaction via Metamask\n    try {\n        const txHash = await window.ethereum\n            .request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        return {\n            success: true,\n            status: \"✅ Check out your transaction on Etherscan: https://kovan.etherscan.io/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"😥 Something went wrong: \" + error.message\n        }\n\n    }\n}\n// ---------------------------------------------------------------------------","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/pinata.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/ipfs.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/MintNFT.js",["181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"./MintNFT.css\";\nimport { Input } from \"reactstrap\";\nimport Select from 'react-select';\nimport ipfs from '../../utils/ipfs';\nimport axios from 'axios';\n\n// Components for the unlockable content section\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// core components\nimport Navbar from \"components/Navbars/MainNavbar.js\";\nimport Footer from \"components/Footer/Footer.js\";\n\nimport { pinJSONToIPFS } from '../../utils/pinata.js'; // used later to add metadata when creating an NFT\n\nimport BlockchainSelectionModal from \"./BlockchainSelection\";\n\n// ********** Connecting to Alchemy and importing our smart contract **********\nrequire('dotenv').config();\nconst alchemykey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemykey);\nconst solanaWeb3 = require(\"@solana/web3.js\");\n\nvar requests = require('requests');\n// Requesting current connected wallet address::...........\n// Changing the contractABI and the contractAddress depending on the current blockchain the user is connected to\n// Specifying the contract info\nconst contractABI = require('../../utils/contract-abi.json');\nconst contractAddress = \"0x7a1C29e5462989dB8680AaF5b9c1FeD6BDC16303\"; //A contract deployed on the polygon Mumbai testnet\n// const SolContractAddress = \"\"; //A contract deployed on the polygon Mumbai testnet\nconst API_KEY_ID = process.env.API_KEY_ID;\nconst API_SECRET_KEY = process.env.API_SECRET_KEY;\n// *****************************************************************************\n\nconst db = 'mongodb://localhost:27017/MarketplaceUsers';\n\n// ************ Checking connection to the wallet ************\nexport const getCurrentWalletConnected = async () => {\n    // ---------- Checking if the user is connected to the Polygon wallet ----------\n    if (window.ethereum) { // Checking if metamask is even installed on the browser\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"👆🏽 Write a message in the text-field above.\",\n                };\n            }\n            // -------- Checking if the user is connected to solana instead --------\n            // else if (window.solana && window.solana.isPhantom) {\n            //     // -------------- Getting the Phantom account address -------------------\n            //     const solanaAccount = await window.solana.connect();\n            //     if (solanaAccount) {\n            //         const solWalletKey = solanaAccount.publicKey.toString();\n            //         return {\n            //             address: solWalletKey,\n            //             status: \"👆🏽 Write a message in the text-field above.\",\n            //         };\n            //     }\n            // }\n            // -------- Else returning an error --------\n            else {\n                return {\n                    address: \"\",\n                    status: \"🦊 Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else { // If the metamask browser extention is not installed\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        🦊{\" \"}\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                            You must install Metamask, a virtual Ethereum wallet, in your browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n// *****************************************************************************\n\n// *************** Calling the Mint function in our smart contract ***************\nexport const mintNFT = async (img, name, description, extLink, attributes) => {\n    // Cheking if all the required fields are filled\n    if (img === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\n        return {\n            success: false,\n            status: \"❗Please make sure all fields are completed before minting.\",\n        }\n    }\n\n    // Creating the metadata\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = img;\n    metadata.description = description;\n    metadata.externalLink = extLink;\n    metadata.attributes = attributes;\n\n    // Calling pinata to pin the metadata to IPFS\n    const pinataResponse = await pinJSONToIPFS(metadata);\n    if (!pinataResponse.success) {\n        return {\n            success: false,\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\n        }\n    }\n    const tokenURI = pinataResponse.pinataUrl;\n\n    // Initiating our contract with web3\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    //setting up the Ethereum transaction\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to the NFT smart contract \n    };\n\n    //signing the transaction via Metamask\n    try {\n        const txHash = await window.ethereum\n            .request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        return {\n            success: true,\n            status: \"✅ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"😥 Something went wrong: \" + error.message\n        }\n    }\n}\n// *****************************************************************************\n\n// **************** Solana NFT mint function ****************\n// export const mintSolanaNFT = async (img, name, description, extLink, attributes) => {\n//     // Cheking if all the required fields are filled\n//     if (img === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\n//         return {\n//             success: false,\n//             status: \"❗Please make sure all fields are completed before minting.\",\n//         }\n//     }\n\n//     const HEADERS = {\n//         \"APIKeyID\": API_KEY_ID,\n//         \"APISecretKey\": API_SECRET_KEY\n//     }\n\n//     const solanaAccount = await window.solana.connect();\n//     const MNEMONIC_PHRASE = solanaAccount.publicKey.toString();\n\n//     const PARAMS = {\n//         \"secret_recovery_phrase\": MNEMONIC_PHRASE,\n//         \"derivation_path\": \"\",\n//         \"network\": \"devnet\",\n//         \"nft_name\": \"Rare Rare Punk Pig #001\",\n//         \"nft_symbol\": \"PUNKPIG\",\n//         \"nft_url\": \"https://pbs.twimg.com/profile_images/724046973276278784/8fvrG3zo_400x400.jpg\",\n//         \"nft_upload_method\": \"LINK\"\n//     }\n\n//     const response = requests.post({\n//         \"url\": \"https://api.theblockchainapi.com/v1/solana/nft\",\n//         \"params\": PARAMS,\n//         \"headers\": HEADERS\n//     });\n\n//     console.log(response.json())\n// }\n// **********************************************************\n\n// **************** Begining the Main function ****************\nexport default function MintNFT() {\n    //variable to handle the unlockable content section\n    const [unlockable, setUnlockable] = useState(false);\n\n    //State variables\n    const [status, setStatus] = useState(\"\");\n    const [walletAddress, setWallet] = useState(\"\");\n    const [name, setName] = useState(\"\"); //metadata component\n    const [description, setDescription] = useState(\"\"); //metadata component\n    const [img, setImg] = useState(\"\"); //metadata component\n    const [extlink, setExtlink] = useState(\"\"); //metadata component\n    const [attributes, setAttributes] = useState([\n        { name: \"\", value: \"\" },\n    ]); //metadata component\n\n    //const [contractAddress, setContractAddress] = useState(\"\"); // used to change the smart contract address\n    const contractAddress = useRef(null);\n\n    // ------ Begining the image upload handling ------\n    const [images, setImages] = useState([]);\n    const [imageURLs, setImageURLs] = useState([]);\n\n    useEffect(() => {\n        if (images.length < 1) return;\n        const newImageUrls = [];\n        images.forEach(image => newImageUrls.push(URL.createObjectURL(image)));\n        setImageURLs(newImageUrls);\n    }, [images]);\n\n    // Capturing the uploaded image\n    const onImageChange = (event) => {\n        setImages([...event.target.files]);\n        const file = event.target.files[0];\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () => {\n            // uploading the image to ipfs and getting the hash\n            const imgBuffer = Buffer.from(reader.result);\n            ipfs.files.add(imgBuffer, (error, result) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    setImg(\"https://ipfs.io/ipfs/\" + result[0].hash);\n                    console.log(result[0].hash);\n                }\n            })\n        };\n    }\n    // ------ End of the image upload handling ------\n\n    // ------ Begining the NFT properties handling ------\n    let addFormFields = () => {\n        setAttributes([...attributes, { name: \"\", value: \"\" }])\n    }\n\n    let removeFormFields = (i) => {\n        let newAttributeValues = [...attributes];\n        newAttributeValues.splice(i, 1);\n        setAttributes(newAttributeValues)\n    }\n    // ------ Ending the NFT properties handling ------\n\n    const handleSubmit = (event) => { //for the form submit\n        alert(JSON.stringify(attributes));\n        console.log(\"sucess\");\n    }\n\n    const handleChange = (i, event) => { // Used for the unlockable content section\n        // Detecting added NFT traits\n        let newAttributeValues = [...attributes];\n        newAttributeValues[i][event.target.name] = event.target.value;\n        setAttributes(newAttributeValues);\n        //console.log(i, event.target.name)\n    };\n\n    const handleChangeUnlockableContent = (event) => { // Used for the unlockable content section\n        setUnlockable(event.target.checked);\n    };\n\n    const onMintPressed = async () => { // Function to mint the token once the form is submitted\n        //console.log(\"inputFields\", attributes);\n        const address = await getCurrentWalletConnected();\n        if (address.address !== \"\") {\n            const { status } = await mintNFT(img, name, description, extlink, attributes);\n            setStatus(status);\n        }\n        else {\n            setStatus(\"🦊 Connect to Metamask, 👻 Phantom, or any other wallet using the top right buttons.\");\n            window.alert(\"You're not currently connected to your wallet.\");\n        }\n    };\n\n    // const onSolMintPressed = async () => { // Function to mint the token once the form is submitted\n    //     //console.log(\"inputFields\", attributes);\n    //     const address = await getCurrentWalletConnected();\n    //     if (address !== \"\") {\n    //         const { status } = await mintSolanaNFT(img, name, description, extlink, attributes);\n    //         setStatus(status);\n    //     }\n    //     else {\n    //         setStatus(\"🦊 Connect to Metamask, 👻 Phantom, or any other wallet using the top right buttons.\");\n    //         window.alert(\"You're not currently connected to your wallet.\");\n    //     }\n    // };\n\n    const ChangeCurrentBlockchain = () => {\n        // if (event.target.value === \"rinkeby\") {\n        //     setContractAddress(\"0x8d12a197cb00d4747a1fe03395095ce2a5cc6819\");\n        // }\n        // else if (event.target.value === \"mainnet\") {\n        //     setContractAddress(\"0x8d12a197cb00d4747a1fe03395095ce2a5cc6819\");\n        // }\n        return (\n            <>\n                <BlockchainSelectionModal />\n            </>\n        )\n    }\n\n    // Function to set the smart contract address to mint the nft from \n    const onSmartContractChange = (event) => {\n        // Getting the list of all the contracts in the DB\n        const contractList = axios.get(`${db}contracts`).then((response) => {\n            const allContracts = response.data.contracts;\n        }).catch(error => console.error(`Error: ${error}`));\n        console.log(contractList);\n        // Setting the contract address to the one selected by the user\n        if (event.target.value == \"default contract\") {\n            contractAddress.current.hidden = true;\n            console.log(\"default contract is selected\");\n        }\n        else if (event.target.value == \"Other\") {\n            contractAddress.current.hidden = false;\n            console.log(contractAddress.current.value);\n        }\n        else {\n            contractAddress.current.hidden = true;\n            console.log(event.target.value);\n        }\n    }\n\n    return (\n        <>\n            {/* --------------- Begin Navbar --------------- */}\n            <Navbar />\n            {/* --------------- End Navbar --------------- */}\n\n            <div className=\"wrapper\">\n                {/* -------------- Begin NFT Creation Form ----------------- */}\n                <div className=\"content-center\">\n                    <section className=\"section section-lg\">\n                        <section className=\"section\">\n                            <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">* Required fields</small>\n                            <br />\n                            <form onSubmit={handleSubmit}>\n                                <div className=\"form-group\">\n                                    <label for=\"uploadMedia\">Choose an Image, Video, Audio, or a 3D Model *</label>\n                                    <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">File types supported: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB, GLTF. Max size: 100 MB</small>\n                                    <input type=\"file\" class=\"form-control\" id=\"uploadMedia\" aria-describedby=\"uploadMediaHelp\" onChange={onImageChange} required />\n                                    {imageURLs.map(imageSrc => <img alt=\"...\" src={imageSrc} style={{ width: 400, height: 250 }} />)}\n                                </div>\n                                <div class=\"form-group\" >\n                                    <label for=\"exampleInputName\">Name *</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"Enter NFT name\" onChange={(event) => setName(event.target.value)} required />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleInputLink\">External Link (optional)</label>\n                                    <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">This will allow you to include a link to this URL on this item's detail page, so that users can click to learn more about it. You are welcome to link to your own webpage with more details.</small>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputLink\" placeholder=\"https://yoursite.com/item1/\" onChange={(event) => setExtlink(event.target.value)} />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleInputDesc\">Description *</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">The description will be included on the item's detail page underneath its image.</small>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputDesc\" placeholder=\"Provide a detailed description of your item.\" onChange={(event) => setDescription(event.target.value)} />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Collection (optional)</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">This is the collection where your item will appear.</small>\n                                    <select class=\"form-control\" id=\"exampleColl\">\n                                        <option style={{ backgroundImage: \"../../assets/img/image.png\", width: 20, height: 20 }}>PhotographyCollection#123</option>\n                                        <option>TestCollection...</option>\n                                        <option>#3</option>\n                                        <option>...</option>\n                                    </select>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Properties (optional)</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">Add your NFT Traits.</small>\n                                    <br />\n                                    {/* ---------- Begin NFT Traits section ---------- */}\n                                    {attributes.map((element, index) => (\n                                        <div className=\"form-inline\" key={index}>\n                                            <label style={{ color: \"white\", paddingRight: 20 }}>Type</label>\n                                            <input type=\"text\" name=\"name\" placeholder='Exp: Class' class=\"form-control\" value={element.name || \"\"} onChange={e => handleChange(index, e)} /> &nbsp;&nbsp;&nbsp;&nbsp;\n                                            <label style={{ color: \"white\", paddingRight: 20 }}>Value</label>\n                                            <input type=\"text\" name=\"value\" placeholder='Exp: Warrior' class=\"form-control\" value={element.value || \"\"} onChange={e => handleChange(index, e)} /> &nbsp;&nbsp;&nbsp;&nbsp;\n                                            {\n                                                index ?\n                                                    <button type=\"button\" class=\"btn btn-danger\" onClick={() => removeFormFields(index)}>Remove</button>\n                                                    : null\n                                            }\n                                        </div>\n                                    ))}\n                                    {/* ---------- End NFT Traits section ---------- */}\n                                    <button class=\"btn btn-secondary\" type=\"button\" onClick={() => addFormFields()}>+ Add Properties</button>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Unlockable Content\n                                        <small id=\"DescHelp\" class=\"form-text text-muted\">Include unlockable content that can only be revealed by the owner of the item.</small>\n                                    </label>\n                                    <br />\n                                    <FormControlLabel\n                                        control={\n                                            <Switch checked={unlockable} onChange={handleChangeUnlockableContent} aria-label=\"login switch\" />\n                                        }\n                                        label={unlockable ? <Input class=\"form-control\" placeholder=\"Enter Content (Access key, Redeem code, link to a file,...).\" rows=\"3\" type=\"textarea\" /> : <Input class=\"form-control\" placeholder=\"Enter Content (Access key, Redeem code, link to a file,...).\" rows=\"3\" type=\"textarea\" hidden />}\n                                    />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Supply</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">The amout of tokens you'll own.</small>\n                                    <input type=\"number\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"1\" disabled />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Smart contract</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">You can either deploy your NFT on our TNM's smart contract, or you can choose one of your own own smart contract.</small>\n                                    {/* List of smart contracts of the user including the smart contract deployed by us, OR the user can select \"other\" option and manually enter his smart contract address*/}\n                                    <select class=\"form-control\" id=\"exampleColl\" onChange={onSmartContractChange}>\n                                        <option>Default Contract</option>\n                                        <option>0x03ef23f801D2bc9B2A839DD476a16842C0066456</option>\n                                        <option>...</option>\n                                        <option>Other</option>\n                                    </select>\n                                    {/* If the user selects Other then the line here under should appear and the selection list above should be hidden */}\n                                    <input type=\"text\" class=\"form-control\" id=\"otherSCAddress\" ref={contractAddress} aria-describedby=\"NameHelp\" placeholder=\"0x7a1C29e5462989dB8680AaF5b9c1FeD6BDC16303\" hidden />\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Blockchain</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">If you want to change your current Blockchain, you can click this button.</small>\n                                    {/* <BlockchainSelectionModal style={{ display: \"flex\", margin: \"auto\" }} value=\"Change Blockchain\"/> */}\n                                    <button class=\"btn btn-warning\" type=\"button\" onClick={ChangeCurrentBlockchain} style={{ padding: 11 }}><i className=\"tim-icons icon-alert-circle-exc\" style={{ marginRight: 7 }} />Change Blockchain</button>\n                                </div>\n                                <br />\n                                <button type=\"button\" class=\"btn btn-primary\" onClick={onMintPressed}><i className=\"tim-icons icon-check-2\" /> &nbsp;&nbsp; Create NFT</button>\n                                <p id=\"status\">{status}</p>\n                            </form>\n                        </section>\n                    </section>\n\n                </div>\n                {/* -------------------------- End NFT Creation Form ------------------------- */}\n            </div>\n\n            {/* --------------- Begin Footer --------------- */}\n            <Footer />\n            {/* --------------- End Footer --------------- */}\n\n        </>\n    );\n}\n// **************** Ending the Main function ****************","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/ProfilePage.js",["193","194","195"],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/LandingPage.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/BlockchainSelection.js",["196","197"],"import { React, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { useHistory } from 'react-router-dom';\n// import WalletConnectProvider from \"@walletconnect/web3-provider\";\n// import Web3Modal from \"web3modal\";\nimport { Button, Card, CardHeader } from \"reactstrap\";\nimport Web3 from 'web3';\nimport * as fcl from \"@onflow/fcl\"; // used to call and configure the flow wallet (Blocto)\nimport axios from 'axios';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 900,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst BlockchainSelectionModal = (props) => {\n    const [open, setOpen] = useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const [isConnected, setIsConnected] = useState(false);\n    const history = useHistory();\n\n    // ------------------ Flow (Blocto) Wallet configuration used later in the authentication process ------------------\n    fcl.config()\n        .put(\"accessNode.api\", \"https://access-testnet.onflow.org\") // connect to Flow testnet\n        .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\") // use Blocto testnet wallet\n    // ------------------------------------------------------------------------------------------------------------------\n\n    // ----------- If Polygon is selected as the wanted Blockchain ------------\n    const PolygonSelected = async () => {\n        if (window.ethereum) { // Checking if metamask is installed\n            const provider = window.ethereum; // if yes, checking if the user is connected and getting his account\n            const web3 = new Web3(provider);\n            const accounts = await web3.eth.getAccounts();\n            if (accounts.length < 1) { // if the user is not connected, requesting metamask authentication\n                const current = await provider.request({\n                    method: \"eth_requestAccounts\",\n                });\n                // ------------------- Creating the user and adding it to the database -------------------\n                const userObject = {\n                    walletAddresses: current[0],\n                };\n                // console.log(userObject);\n                axios.post('http://localhost:7000/user', userObject).then((res) => {\n                    console.log(res.data)\n                    // console.log(userObject)\n                }).catch((error) => {\n                    console.log(error)\n                });\n                // --------------------------- Redirecting the user to the mint nft page ---------------------------------\n                history.push(\"/mint-nft\");\n                setIsConnected(true);\n            } else {\n                history.push(\"/mint-nft\");\n                setIsConnected(true);\n                console.log(accounts[0]);\n            }\n        } else {\n            window.alert('You need to have Metamask installed to continue!');\n        }\n    }\n    // --------------------------------------------------------------------------\n\n    // ----------- If Solana is selected as the wanted Blockchain -----------\n    const SolanaSelected = async () => {\n        // Checking if the user is already connected to Metamask and if yes requesting to disconnect\n        const web3 = new Web3(window.ethereum);\n        const accounts = await web3.eth.getAccounts();\n        if (accounts.length >= 1) {\n            window.alert('You are currently connected to another account, please disconnect from all other wallets to continue!');\n        } else {\n            if (window.solana && window.solana.isPhantom) { // Checking if Phantom is installed\n                // if yes, checking if the user is connected and getting his account\n                const provider = window.solana;\n                const account = await provider.connect();\n                if (account === null) { // if the user is not connected, requesting phantom authentication\n                    const Add = account.publicKey.toString();\n                    const userObject = {\n                        publicAddress: Add\n                    };\n                    history.push(\"/mint-nft\");\n                } else {\n                    history.push(\"/mint-nft\");\n                }\n            } else {\n                window.alert('You need to have Phantom installed to continue!');\n            }\n        }\n    }\n    // --------------------------------------------------------------------------\n\n    // ----------- If Tron is selected as the wanted Blockchain -----------\n    const TronSelected = async () => {\n        // Checking if the user is already connected to Metamask or Phantom and if yes requesting to disconnect\n        const Pol_web3 = new Web3(window.ethereum);\n        const Pol_accounts = await Pol_web3.eth.getAccounts();\n        if (Pol_accounts.length >= 1) {\n            window.alert('You are currently connected to another account, please disconnect from all other wallets to continue!');\n        } else {\n            if (window.tronWeb && window.tronWeb.ready) { // Checking if Tronlink is installed\n                // if yes, checking if the user is connected and getting his account\n                const provider = window.tronWeb;\n                const account = await provider.trx.getAccount(\n                    window.tronWeb.defaultAddress.base58\n                );\n                console.log(account);\n                if (account === false) { // if the user is not connected, requesting tronlink authentication\n                    provider.request({\n                        method: 'tron_requestAccounts'\n                    });\n                    // history.push(\"/mint-nft\");\n                } else {\n                    history.push(\"/mint-nft\");\n                }\n            } else {\n                window.alert('You need to have Tronlink installed to continue!');\n            }\n        }\n    }\n    // --------------------------------------------------------------------------\n\n    // ----------- If Flow is selected as the wanted Blockchain -----------\n    const FlowSelected = async () => {\n        // Checking if the user is already connected to Metamask or Phantom and if yes requesting to disconnect\n        const Pol_web3 = new Web3(window.ethereum);\n        const Pol_accounts = await Pol_web3.eth.getAccounts();\n        if (Pol_accounts.length >= 1) {\n            window.alert('You are currently connected to another account, please disconnect from all other wallets to continue!');\n        }\n        else {\n            const user = await fcl.currentUser().snapshot();\n            if (user.addr === null) {\n                await fcl.authenticate()\n                if (user.addr !== null) {\n                    history.push(\"/mint-nft\");\n                } else {\n                    window.alert('Authentication error!');\n                }\n            }\n            else {\n                history.push(\"/mint-nft\");\n                console.log(user.addr);\n            }\n        }\n    }\n    // --------------------------------------------------------------------------\n\n    // ----------- Disconnecting from any connected wallet -----------\n    // const Disconnect = async () => {\n    //     const poly_provider = window.ethereum;\n    //     const web3 = new Web3(poly_provider);\n    //     const poly_account = await web3.eth.getAccounts();\n    //     const sol_provider = window.solana;\n    //     const sol_account = sol_provider.connect().publicKey.toString();\n    //     const user = await fcl.currentUser().snapshot();\n    //     // Disconnecting from Metamask\n    //     if (poly_account.length > 1) {\n    //         await web3.eth.currentProvider.disconnect();\n    //         setIsConnected(false);\n    //         window.alert(\"You have successfully been disconnected from Metamask!\");\n    //     }\n    //     // Disconnecting from Phantom\n    //     else if (sol_account !== \"\") {\n    //         await sol_provider.disconnect();\n    //         window.alert(\"You have successfully been disconnected from Phantom!\");\n    //         setIsConnected(false);\n    //     }\n    //     // Disconnecting from Tronlink\n    //     // Disconnecting from Blocto\n    //     else if (user.addr !== null) {\n    //         await fcl.unauthenticate();\n    //         window.alert(\"You have successfully been disconnected from Blocto!\");\n    //         setIsConnected(false);\n    //     }\n    //     // If the user is not connected to any wallet\n    //     else {\n    //         window.alert(\"You are not currently connected to any wallet!\");\n    //         setIsConnected(false);\n    //     }\n    // }\n    // ------------------------------------------------------------\n\n    return (\n        <div>\n            <Button onClick={handleOpen} className=\"nav-link d-none d-lg-block\" color=\"secondary\" type=\"button\" style={{ width: 130 }}><i className=\"tim-icons icon-molecule-40\" />Create NFT</Button>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\" >\n                <Box sx={style}>\n                    <Card className=\"bg-secondary shadow border-0\" >\n                        <CardHeader className=\"bg-transparent pb-5\">\n                            <div className=\"text-muted mb-4\">\n                                <h2 style={{ color: \"#304169\" }}>Choose Blockchain\n                                    <h5 style={{ color: \"#6E6E6E\" }}>Choose the most suitable blockchain for your needs. You need to sign in for creation.</h5>\n                                </h2>\n                            </div>\n                            {/* -------------------- Blockchain Cards Section -------------------- */}\n                            <center>\n                                {/* ------------- Polygon Card ------------- */}\n                                <Card className=\"bg-secondary shadow border-0\" style={{ width: \"10rem\", float: \"left\", marginRight: 20, marginLeft: 10 }}>\n                                    <center>\n                                        <img alt=\"...\" src={require(\"../../assets/img/polygon_logo.png\").default} style={{ width: 50, height: 50, marginTop: 20 }} />\n                                        <h4 style={{ color: \"#304169\" }}>Polygon</h4>\n                                        <Button className=\"btn-icon btn-2\" color=\"default\" type=\"button\" style={{ width: 100, marginBottom: 20 }} onClick={PolygonSelected}> Select </Button>\n                                    </center>\n                                </Card>\n                                {/* ------------- Flow Card ------------- */}\n                                <Card className=\"bg-secondary shadow border-0\" style={{ width: \"10rem\", float: \"left\", marginRight: 20 }}>\n                                    <center>\n                                        <img alt=\"...\" src={require(\"../../assets/img/flow_logo.png\").default} style={{ width: 50, height: 50, marginTop: 20 }} />\n                                        <h4 style={{ color: \"#304169\" }}>Flow</h4>\n                                        <Button className=\"btn-icon btn-2\" color=\"default\" type=\"button\" style={{ width: 100, marginBottom: 20 }} onClick={FlowSelected}> Select </Button>\n                                    </center>\n                                </Card>\n                                {/* ------------- Solana Card ------------- */}\n                                <Card className=\"bg-secondary shadow border-0\" style={{ width: \"10rem\", float: \"left\" }}>\n                                    <center>\n                                        <img alt=\"...\" src={require(\"../../assets/img/solana_logo.png\").default} style={{ width: 50, height: 50, marginTop: 20 }} />\n                                        <h4 style={{ color: \"#304169\" }}>Solana</h4>\n                                        <Button className=\"btn-icon btn-2\" color=\"default\" type=\"button\" style={{ width: 100, marginBottom: 20 }} onClick={SolanaSelected}> Select </Button>\n                                    </center>\n                                </Card>\n                                {/* ------------- Tron Card ------------- */}\n                                <Card className=\"bg-secondary shadow border-0\" style={{ width: \"10rem\" }}>\n                                    <center>\n                                        <img alt=\"...\" src={require(\"../../assets/img/tron_logo.png\").default} style={{ width: 50, height: 50, marginTop: 20 }} />\n                                        <h4 style={{ color: \"#304169\" }}>Tron</h4>\n                                        <Button className=\"btn-icon btn-2\" color=\"default\" type=\"button\" style={{ width: 100, marginBottom: 20 }} onClick={TronSelected}> Select </Button>\n                                    </center>\n                                </Card>\n                                {/* ------------- Disconnect Button ------------- */}\n                                {/* {isConnected ? <Button className=\"btn-icon btn-2\" color=\"warning\" type=\"button\" style={{ width: 110, marginBottom: 20 }} onClick={Disconnect}> Disconnect </Button> : <Button className=\"btn-icon btn-2\" color=\"warning\" type=\"button\" style={{ width: 110, marginBottom: 20 }} disabled> Disconnect </Button>} */}\n                            </center>\n                        </CardHeader>\n                    </Card>\n                </Box>\n            </Modal>\n        </div>\n    );\n}\n\nexport default BlockchainSelectionModal;","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/Authenticate.js",["198","199","200"],"import { React, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport AuthForm from \"./AuthenticationForm\";\nimport {\n  Button, Card, CardHeader, DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown\n} from \"reactstrap\";\n\nimport Web3 from 'web3';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst Modals = (props) => {\n\n  // ------ Wallet connection vars ------\n  const [isConnecting, setIsConnecting] = useState(false); //used to check if the user is connecting or not to display different messages\n  const [isConnected, setIsConnected] = useState(false); // we'll use this to check if the user is connected or not\n  const [currentAccount, setCurrentAccount] = useState(null); // We'll use this to get the Metamask connected account\n  const [currentBalance, setCurrentBalance] = useState(0); // We'll use this to get the account balance of the connected user\n  // ------------------------------------\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  // ---------------- For compatibility reasons, we need to check the version of the provider (Metamask) because some browsers still use window.web3 instead of window.ethereum --------------------------\n  const detectProvider = () => {\n    let provider;\n    // ----- Checking Polygon (Ethereum) provider -----\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.solana && window.solana.isPhantom) { // ----- Checking Solana provider-----\n      provider = window.solana;\n    } else if (window.tronWeb) {\n      provider = window.tronWeb;\n    } else if (window.web3) { // ----- Checking Web3 general provider-----\n      provider = window.web3.currentProvider;\n    } else { // ----- If no provider is found -----\n      window.alert(\"No wallet browser-extension detected! check out your browser extensions!\");\n    }\n    return provider;\n  }\n  // ---------------------------------------------------------------------------------------------------------------\n\n  // ********************************* Metamask Connection (Once clicked, this function will change the status of the user to Connected!) *********************************\n  const AuthBtnClick = async () => {\n    const provider = detectProvider();\n    // Initalizing web3\n    const web3 = new Web3(provider);\n    if (provider) {\n\n      // ------------------- Cheking if Metamask is installed and detected ------------------- \n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallets installed ?\");\n      }\n\n      setIsConnecting(true);\n      await provider.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      // ------------------- Getting our Metamask account -------------------\n      const accounts = await web3.eth.getAccounts();\n\n      // ------------------- checking if we're actually connected to Metamask -------------------\n      if (accounts.length === 0) {\n        console.log(\"Please make sure you're connected to Metamask!\");\n      } else if (accounts[0] !== currentAccount) {\n        setCurrentAccount(accounts[0]);\n        console.log(\"Account changed to: \" + accounts[0]);\n\n        // ------------------- Getting the current balance -------------------\n        const accBalance = web3.utils.fromWei(\n          await web3.eth.getBalance(accounts[0]),\n          \"ether\"\n        );\n        setCurrentBalance(Number(accBalance).toFixed(6));\n        console.log(\"Balance changed to: \" + accBalance);\n        setIsConnected(true);\n      }\n\n      // ------------------- Creating the user and adding it to the database -------------------\n      // const userObject = {\n      //   publicAddress: accounts[0]\n      // };\n      // axios.post('http://localhost:7000/user', userObject).then((res) => {\n      //   console.log(res.data)\n      // }).catch((error) => {\n      //   console.log(error)\n      // });\n\n      setIsConnecting(false);\n      // props.onLogin(provider);\n    }\n  };\n  // ********************************* End Metamask Connection ******************************************\n\n  return (\n    <div>\n      <Button onClick={handleOpen} className=\"nav-link d-none d-lg-block\" color=\"secondary\" type=\"button\" style={{ width: 110 }}><i className=\"tim-icons icon-wallet-43\" />Connect</Button>\n      <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\" >\n        <Box sx={style}>\n          <Card className=\"bg-secondary shadow border-0\" >\n            <CardHeader className=\"bg-transparent pb-5\">\n              {/* -------------------- Wallet sign in -------------------- */}\n              <div className=\"text-center text-muted mb-4\">\n                <small style={{color:\"#304169\"}}>Sign in via Wallets</small>\n              </div>\n              <center>\n                <UncontrolledDropdown>\n                  <center>\n                    <DropdownToggle caret color=\"default\">\n                      <img alt=\"...\" src={require(\"../../assets/img/wallets.png\").default} style={{ width: 40, height: 40 }} />\n                      Select a wallet\n                    </DropdownToggle>\n                  </center>\n                  <DropdownMenu>\n                    <li>\n                      {/* -------------- Metamask Login btn -------------- */}\n                      <DropdownItem href=\"#pablo\" onClick={AuthBtnClick}>\n                        <img alt=\"...\" src={require(\"../../assets/img/metamask_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; Metamask\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/phantom_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; Phantom\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/tronlink_logo.png\").default} style={{ width: 40, height: 40 }} />\n                        &nbsp;&nbsp; TronLink\n                      </DropdownItem>\n                    </li>\n                    <li>\n                      <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\n                        <img alt=\"...\" src={require(\"../../assets/img/Blocto_logo.png\").default} style={{ width: 33, height: 40 }} />\n                        &nbsp;&nbsp;&nbsp;&nbsp; Blocto\n                      </DropdownItem>\n                    </li>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </center>\n\n              {/* -------------------- Classic form sign in -------------------- */}\n              <AuthForm />\n\n              {/* -------------------- Social Media sign in -------------------- */}\n              <div className=\"text-muted text-center mt-2 mb-3\">\n                <small style={{color:\"#304169\"}}>Or sign in with</small>\n              </div>\n              <div className=\"btn-wrapper text-center\">\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/github.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Github</span>\n                </Button>\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/google.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Google</span>\n                </Button>\n                <Button className=\"btn-neutral btn-icon\" color=\"default\" href=\"#\" style={{ width: 40, height: 40, background: \"none\" }}>\n                  <span className=\"btn-inner--icon\">\n                    <img alt=\"...\" src={require(\"../../assets/img/twitter.png\").default} />\n                  </span>\n                  <span className=\"btn-inner--text\">Twitter</span>\n                </Button>\n              </div>\n\n            </CardHeader>\n          </Card>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Modals; ","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/AuthenticationForm.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/components/Navbars/MainNavbar.js",["201","202","203"],"import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Modal from \"../../views/pages/Authenticate\";\n//import { Redirect } from 'react-router-dom'\n//import MintNFT from \"../../views/examples/MintNFT\";\nimport BlockchainSelectionModal from \"../../views/pages/BlockchainSelection\";\nimport * as fcl from \"@onflow/fcl\"; // used to call and configure the flow wallet (Blocto)\n\n// reactstrap components\nimport {\n  Collapse,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Button,\n} from \"reactstrap\";\n\n// *********************** Main function **************************************\nexport default function PageNavbar() {\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  const [collapseOut, setCollapseOut] = React.useState(\"\");\n  const [color, setColor] = React.useState(\"navbar-transparent\");\n\n  // ------------------ Flow (Blocto) Wallet configuration used later in the authentication process ------------------\n  fcl.config()\n    .put(\"accessNode.api\", \"https://access-testnet.onflow.org\") // connect to Flow testnet\n    .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\") // use Blocto testnet wallet\n  // ------------------------------------------------------------------------------------------------------------------\n\n  // Accessing the history instance created by React\n  const history = useHistory();\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", changeColor);\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", changeColor);\n    };\n  }, []);\n\n  const changeColor = () => {\n    if (\n      document.documentElement.scrollTop > 99 ||\n      document.body.scrollTop > 99\n    ) {\n      setColor(\"bg-default\");\n    } else if (\n      document.documentElement.scrollTop < 100 ||\n      document.body.scrollTop < 100\n    ) {\n      setColor(\"navbar-transparent\");\n    }\n  };\n\n  const toggleCollapse = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    setCollapseOpen(!collapseOpen);\n  };\n\n  const onCollapseExiting = () => {\n    setCollapseOut(\"collapsing-out\");\n  };\n\n  const onCollapseExited = () => {\n    setCollapseOut(\"\");\n  };\n\n  // Redirecting to the NFT minting page\n  const MintNFTPage = () => {\n    history.push(\"/mint-nft\");\n  };\n\n  const CreateSmartContract = () => {\n    // Checking if the user is currently connected to a wallet \n    // if wallet redirect to smart contract creation form\n    // else alert \"You're not currently connected to any wallet.\"\n    // if (window.web3.eth.accounts.length > 0) {\n    //   history.push(\"/create-smart-contract\");\n    // } else if (window.solana && window.solana.isPhantom) {\n    //   history.push(\"/create-smart-contract\");\n    // } else if (fcl.currentUser().snapshot()) {\n    //   history.push(\"/create-smart-contract\");\n    // } else { \n    //   window.alert(\"You need to be connected to at least one wallet to create a smart contract\");\n    // }\n    history.push(\"/create-smart-contract\");\n  }\n\n  // ********** Getting the current connected wallet address **********\n  const onProfileClick = async () => {\n    // ---------- Checking if the user is connected to the Polygon wallet ----------\n    if (window.ethereum) { // Checking if metamask is even installed on the browser\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          console.log(addressArray[0]);\n          history.push(\"/profile-page\");\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        }\n        else {\n          window.alert(\"🦊   You're not currently connected, please connect to a wallet to continue\");\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else { // If the metamask browser extention is not installed\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n  // **************************************************************************\n\n  return (\n    <Navbar className={\"fixed-top \" + color} color-on-scroll=\"100\" expand=\"lg\">\n      <Container>\n        <div className=\"navbar-translate\">\n          <NavbarBrand to=\"/\" id=\"navbar-brand\" tag={Link}>\n            <img src={require(\"../../assets/img/logoTNM-01.png\").default} alt=\"logo\" style={{ width: 135, height: 50 }} />\n          </NavbarBrand>\n\n          <button aria-expanded={collapseOpen} className=\"navbar-toggler navbar-toggler\" onClick={toggleCollapse}>\n            <span className=\"navbar-toggler-bar bar1\" />\n            <span className=\"navbar-toggler-bar bar2\" />\n            <span className=\"navbar-toggler-bar bar3\" />\n          </button>\n        </div>\n        <Collapse\n          className={\"justify-content-end \" + collapseOut}\n          navbar\n          isOpen={collapseOpen}\n          onExiting={onCollapseExiting}\n          onExited={onCollapseExited}\n        >\n          <div className=\"navbar-collapse-header\">\n            <Row>\n              <Col className=\"collapse-brand\" xs=\"6\">\n                <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                  TNM•\n                </a>\n              </Col>\n              <Col className=\"collapse-close text-right\" xs=\"6\">\n                <button\n                  aria-expanded={collapseOpen}\n                  className=\"navbar-toggler\"\n                  onClick={toggleCollapse}\n                >\n                  <i className=\"tim-icons icon-simple-remove\" />\n                </button>\n              </Col>\n            </Row>\n          </div>\n          <Nav navbar>\n            <UncontrolledDropdown>\n              <DropdownToggle style={{ width: 110, height: 36, padding: 0 }}>\n                <i className=\"tim-icons icon-planet\" /> &nbsp; Explore\n              </DropdownToggle>\n              <DropdownMenu>\n                <li>\n                  <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                    All NFTs\n                  </DropdownItem>\n                </li>\n                <li>\n                  <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                    Artwork\n                  </DropdownItem>\n                </li>\n                <li>\n                  <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                    Photography\n                  </DropdownItem>\n                </li>\n                <li>\n                  <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                    Charity\n                  </DropdownItem>\n                </li>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                About TNM\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/\">\n                TOP Sellers\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <BlockchainSelectionModal style={{ display: \"flex\", margin: \"auto\" }} />\n            </NavItem>\n            {/* <NavItem>\n              <UncontrolledDropdown>\n                <DropdownToggle style={{ width: 160, height: 37 }}>\n                  <i className=\"tim-icons icon-spaceship\" />\n                  My NFT\n                </DropdownToggle>\n                <DropdownMenu>\n                  <li>\n                    <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                      Create NFT\n                    </DropdownItem>\n                  </li>\n                  <li>\n                    <DropdownItem onClick={MintNFTPage}>\n                      Mint NFT\n                    </DropdownItem> \n                  </li>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </NavItem> */}\n\n            {/* <NavItem>\n              <Modal style={{ display: \"flex\", margin: \"auto\" }} />\n            </NavItem> */}\n\n\n            <NavItem>\n              <Button onClick={CreateSmartContract} className=\"nav-link d-none d-lg-block\" color=\"secondary\" type=\"button\" style={{ width: 130 }}><i className=\"tim-icons icon-single-copy-04\" />Create SC</Button>\n            </NavItem>\n\n            <NavItem>\n              <Button onClick={onProfileClick} className=\"nav-link d-none d-lg-block\" color=\"secondary\" type=\"button\">\n                <img alt=\"...\" src={require(\"../../assets/img/user.png\").default} style={{ width: 30, height: 30 }} />\n              </Button>\n\n              {/* <UncontrolledDropdown>\n                <DropdownToggle style={{ background: \"none\", padding: 0, marginTop: 5 }} >\n                  <img alt=\"...\" src={require(\"../../assets/img/user.png\").default} style={{ width: 30, height: 30 }} />\n                </DropdownToggle>\n                <DropdownMenu>\n                  <li>\n                    <DropdownItem onClick={onProfileClick} tag=\"a\">\n                      Profile\n                    </DropdownItem>\n                  </li>\n                  <li>\n                    <DropdownItem href=\"#\" onClick={e => e.preventDefault()}>\n                      Log Out\n                    </DropdownItem>\n                  </li>\n                </DropdownMenu>\n              </UncontrolledDropdown> */}\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/CreateSmartContract.js",["204","205"],"import React, { useState, useEffect, setState } from \"react\";\nimport \"./MintNFT.css\";\n\n// core components\nimport Navbar from \"components/Navbars/MainNavbar.js\";\nimport Footer from \"components/Footer/Footer.js\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport { FeaturesList } from \"../../utils/features\";\nimport axios from \"axios\";\n\nrequire('dotenv').config();\n\n// ************ Checking connection to the wallet and getting the current connected address ************\nexport const getCurrentWalletConnected = async () => {\n\n    // Checking Metamask connection\n    if (window.ethereum) { // Checking if metamask is even installed on the browser\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"👆🏽 Write a message in the text-field above.\",\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"🦊 Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    }\n\n    // Checking Phantom connection\n    // Checking Blocto connection\n    // Checking Tronlink connection\n\n};\n// *****************************************************************************\n\n// *************** Calling the deploy and verifying the form fields ***************\nexport const deploySC = async (name, symbol, baseuri, features, access, license) => {\n    // Cheking if all the required fields are filled\n    if (name.trim() === \"\" || symbol.trim() === \"\" || access.trim() === \"\" || license.trim() === \"\") {\n        return {\n            success: false,\n            status: \"❗Please make sure all fields are completed before deploying your smart contract.\",\n        }\n    } else {\n\n        // Getting the connected user \n        const currentUser = await window.ethereum.request({\n            method: \"eth_requestAccounts\",\n        });\n        // Creating the smart contract object\n        const contractObject = {\n            name: name,\n            symbol: symbol,\n            baseuri: baseuri,\n            features: features,\n            access: access,\n            license: license,\n            owner: currentUser[0],\n        };\n        // Sending the smart contract object to the backend to be treated and then deployed\n        axios.post('http://localhost:7000/contract', contractObject).then(res => {\n            console.log(res.data);\n            // Checking if the transaction passed in the backend and returning the transaction hash\n            // const txhash = ... ;\n            // if (...) {\n            // return {\n            //     success: true,\n            //     status: \"✅ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com/tx/\" + txHash,\n            // }\n            // } else {\n            //    return {\n            //        success: false,\n            //        status: \"😥 Something went wrong! Please try again later.\",\n            //    }\n            // }\n\n        }).catch((error) => {\n            console.log(error)\n        });\n    }\n}\n// *****************************************************************************\n\n// **************** Begining the Main function ****************\nexport default function Deploy() {\n\n    // State variables\n    const [status, setStatus] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [symbol, setSymbol] = useState(\"\");\n    const [baseuri, setBaseURI] = useState(\"\");\n    const [features, setFeatures] = useState([]);\n    const [access, setAccessControl] = useState(\"\");\n    const [license, setLicense] = useState(\"\");\n\n    // handleChange for the radio boxes of the Access Control features of the smart contract\n    const handleChange = e => {\n        setAccessControl(\n            e.target.value\n        );\n    };\n\n    const onDeployPressed = async () => { // Function to create the smart contract once the form is submitted\n        const address = await getCurrentWalletConnected();\n        if (address.address !== \"\") {\n            const { status } = await deploySC(name, symbol, baseuri, features, access, license);\n            setStatus(status);\n        }\n        else {\n            setStatus(\"🦊 Connect to Metamask, 👻 Phantom, or any other wallet using the top right buttons.\");\n            window.alert(\"You're not currently connected to your wallet.\");\n        }\n    };\n\n    return (\n        <>\n            {/* --------------- Begin Navbar --------------- */}\n            <Navbar />\n            {/* --------------- End Navbar --------------- */}\n\n            <div className=\"wrapper\">\n                {/* -------------- Begin NFT Creation Form ----------------- */}\n                <div className=\"content-center\">\n                    <section className=\"section section-lg\">\n                        <section className=\"section\">\n                            <small id=\"uploadMediaHelp\" class=\"form-text text-muted\">* Required fields</small>\n                            <br />\n                            <form>\n                                {/* ----------------- Name section ----------------- */}\n                                <div class=\"form-group\" >\n                                    <label for=\"exampleInputName\">Name *</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"MyToken\" onChange={(event) => setName(event.target.value)} required />\n                                </div>\n                                {/* ----------------- Symbol section ----------------- */}\n                                <div class=\"form-group\">\n                                    <label for=\"exampleInputLink\">Symbol *</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputLink\" placeholder=\"MTK\" onChange={(event) => setSymbol(event.target.value)} />\n                                </div>\n                                {/* ----------------- Base URI section ----------------- */}\n                                <div class=\"form-group\">\n                                    <label for=\"exampleInputDesc\">Base URI (optional)</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">Will be concatenated with token IDs to generate the token URIs.</small>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputBaseUri\" placeholder=\"https://...\" onChange={(event) => setBaseURI(event.target.value)} />\n                                </div>\n                                {/* ----------------- Features section ----------------- */}\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Features (optional)</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">You can choose the features that you want to add to your smart contractfrom the list below.</small>\n                                    {FeaturesList.map(({ name }, index) => {\n                                        return (\n                                            <div>\n                                                <input\n                                                    type=\"checkbox\"\n                                                    id={`custom-checkbox-${index}`}\n                                                    name={name}\n                                                    value={name}\n                                                    onChange={(event) => setFeatures(features.concat(event.target.value))}\n                                                /> &nbsp;&nbsp;\n                                                <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                                {/* ----------------- Access control section ----------------- */}\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">Access Control *</label>\n                                    <small id=\"DescHelp\" class=\"form-text text-muted\">Control how to, or who has access to your smart contract.</small>\n                                    <label>\n                                        <input type=\"radio\" id=\"ownable_hover\" value=\"Ownable\" onChange={handleChange} />\n                                        &nbsp;&nbsp; Ownable\n                                    </label>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;\n                                    <label>\n                                        <input type=\"radio\" id=\"roles_hover\" value=\"Roles\" onChange={handleChange} />\n                                        &nbsp;&nbsp; Roles\n                                    </label>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        placement=\"bottom\"\n                                        target=\"ownable_hover\">\n                                        Simple mechanism with a single account authorized for all privileged actions.\n                                    </UncontrolledTooltip>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        placement=\"bottom\"\n                                        target=\"roles_hover\">\n                                        Flexible mechanism with a separate role for each privileged action.\n                                    </UncontrolledTooltip>\n                                </div>\n                                {/* ----------------- License section ----------------- */}\n                                <div class=\"form-group\">\n                                    <label for=\"exampleFormControlColl\">License *</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"exampleInputName\" aria-describedby=\"NameHelp\" placeholder=\"MIT\" onChange={(event) => setLicense(event.target.value)} />\n                                </div>\n                                <br />\n                                <button type=\"button\" class=\"btn btn-primary\" onClick={onDeployPressed}><i className=\"tim-icons icon-check-2\" /> &nbsp;&nbsp; Deploy Smart Contract</button>\n                                <p id=\"status\">{status}</p>\n                            </form>\n                        </section>\n                    </section>\n\n                </div>\n                {/* -------------------------- End NFT Creation Form ------------------------- */}\n            </div>\n\n            {/* --------------- Begin Footer --------------- */}\n            <Footer />\n            {/* --------------- End Footer --------------- */}\n\n        </>\n    );\n}\n// **************** Ending the Main function ****************","/home/ayed/Main/Study/PFE/Projet/frontend/src/utils/features.js",[],"/home/ayed/Main/Study/PFE/Projet/frontend/src/views/pages/NFTContainer.js",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":3,"column":132,"nodeType":"212","messageId":"213","endLine":3,"endColumn":141},{"ruleId":"214","severity":1,"message":"215","line":93,"column":64,"nodeType":"216","endLine":93,"endColumn":76},{"ruleId":"206","replacedBy":"217"},{"ruleId":"208","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":19,"column":20,"nodeType":"221","messageId":"222","endLine":19,"endColumn":22},{"ruleId":"219","severity":1,"message":"220","line":19,"column":42,"nodeType":"221","messageId":"222","endLine":19,"endColumn":44},{"ruleId":"219","severity":1,"message":"220","line":19,"column":70,"nodeType":"221","messageId":"222","endLine":19,"endColumn":72},{"ruleId":"223","severity":1,"message":"224","line":27,"column":22,"nodeType":"225","messageId":"226","endLine":27,"endColumn":34},{"ruleId":"210","severity":1,"message":"227","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":14},{"ruleId":"210","severity":1,"message":"228","line":25,"column":7,"nodeType":"212","messageId":"213","endLine":25,"endColumn":17},{"ruleId":"210","severity":1,"message":"229","line":27,"column":5,"nodeType":"212","messageId":"213","endLine":27,"endColumn":13},{"ruleId":"210","severity":1,"message":"230","line":34,"column":7,"nodeType":"212","messageId":"213","endLine":34,"endColumn":17},{"ruleId":"210","severity":1,"message":"231","line":35,"column":7,"nodeType":"212","messageId":"213","endLine":35,"endColumn":21},{"ruleId":"232","severity":1,"message":"233","line":87,"column":25,"nodeType":"216","messageId":"234","endLine":87,"endColumn":87,"fix":"235"},{"ruleId":"223","severity":1,"message":"224","line":109,"column":22,"nodeType":"225","messageId":"226","endLine":109,"endColumn":34},{"ruleId":"210","severity":1,"message":"236","line":201,"column":12,"nodeType":"212","messageId":"213","endLine":201,"endColumn":25},{"ruleId":"210","severity":1,"message":"237","line":201,"column":27,"nodeType":"212","messageId":"213","endLine":201,"endColumn":36},{"ruleId":"210","severity":1,"message":"238","line":318,"column":19,"nodeType":"212","messageId":"213","endLine":318,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":322,"column":32,"nodeType":"221","messageId":"222","endLine":322,"endColumn":34},{"ruleId":"219","severity":1,"message":"220","line":326,"column":37,"nodeType":"221","messageId":"222","endLine":326,"endColumn":39},{"ruleId":"210","severity":1,"message":"239","line":10,"column":57,"nodeType":"212","messageId":"213","endLine":10,"endColumn":61},{"ruleId":"240","severity":1,"message":"241","line":76,"column":13,"nodeType":"242","endLine":128,"endColumn":4},{"ruleId":"240","severity":1,"message":"243","line":128,"column":6,"nodeType":"244","endLine":128,"endColumn":16,"suggestions":"245"},{"ruleId":"210","severity":1,"message":"246","line":28,"column":12,"nodeType":"212","messageId":"213","endLine":28,"endColumn":23},{"ruleId":"210","severity":1,"message":"247","line":86,"column":27,"nodeType":"212","messageId":"213","endLine":86,"endColumn":37},{"ruleId":"210","severity":1,"message":"248","line":29,"column":10,"nodeType":"212","messageId":"213","endLine":29,"endColumn":22},{"ruleId":"210","severity":1,"message":"246","line":30,"column":10,"nodeType":"212","messageId":"213","endLine":30,"endColumn":21},{"ruleId":"210","severity":1,"message":"249","line":32,"column":10,"nodeType":"212","messageId":"213","endLine":32,"endColumn":24},{"ruleId":"210","severity":1,"message":"250","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":13},{"ruleId":"210","severity":1,"message":"251","line":77,"column":9,"nodeType":"212","messageId":"213","endLine":77,"endColumn":20},{"ruleId":"232","severity":1,"message":"233","line":134,"column":15,"nodeType":"216","messageId":"234","endLine":134,"endColumn":77,"fix":"252"},{"ruleId":"210","severity":1,"message":"253","line":1,"column":27,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"254","line":1,"column":38,"nodeType":"212","messageId":"213","endLine":1,"endColumn":46},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["255"],["256"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'Select' is defined but never used.","'solanaWeb3' is assigned a value but never used.","'requests' is assigned a value but never used.","'API_KEY_ID' is assigned a value but never used.","'API_SECRET_KEY' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"257","text":"258"},"'walletAddress' is assigned a value but never used.","'setWallet' is assigned a value but never used.","'allContracts' is assigned a value but never used.","'Form' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["259"],"'isConnected' is assigned a value but never used.","'userObject' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'currentBalance' is assigned a value but never used.","'Modal' is defined but never used.","'MintNFTPage' is assigned a value but never used.",{"range":"260","text":"258"},"'useEffect' is defined but never used.","'setState' is defined but never used.","no-global-assign","no-unsafe-negation",[3763,3763]," rel=\"noreferrer\"",{"desc":"261","fix":"262"},[4408,4408],"Update the dependencies array to be: [history, userInfo]",{"range":"263","text":"264"},[5032,5042],"[history, userInfo]"]